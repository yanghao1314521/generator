<?xml version="1.0"?>
<!--

       Copyright 2006-2022 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          https://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.


-->
<!--
  This ant file is intended to be called from the pom during the P2 publishing phase.
  It will not function when called independantly.
  This file exists primarily because there is no Tycho support for updating
  P2 composite repositories.
  The following environment properties are expected:
  
    project.artifactId (standard Maven property)
    qualifiedVersion  (standard Tycho property)
    project.build.directory (standard Maven property - points to the target directory)
    p2.repo.base.directory (the location of the composite repo.  This might have been initialized
        by pulling a current copy from jfrog)
    
-->
<project name="project" default="updateRepo">
  <target name="init">
    <property name="repo.drops.dir" value="${p2.repo.base.directory}/drops"/>
    <property name="repo.zipped.dir" value="${p2.repo.base.directory}/zipped"/>

    <!-- Create repository directories if they don't already exist -->
    <mkdir dir="${p2.repo.base.directory}"/>
    <mkdir dir="${repo.drops.dir}"/>
    <mkdir dir="${repo.zipped.dir}"/>
  </target>

  <target name="updateRepo" depends="init">
    <!-- copy zip file -->
    <copy file="${project.build.directory}/${project.artifactId}-${qualifiedVersion}.zip" todir="${repo.zipped.dir}"/>

    <!-- copy new drop -->
    <mkdir dir="${repo.drops.dir}/${qualifiedVersion}"/>
    <copy todir="${repo.drops.dir}/${qualifiedVersion}">
      <fileset dir="${project.build.directory}/repository"/>
    </copy>
    
    <!-- turn off composite loading so we don't download all the old versions -->
    <replaceregexp byline="true">
      <regexp pattern="property name='p2.atomic.composite.loading' value='true'" />
      <substitution expression="property name='p2.atomic.composite.loading' value='false'" />
      <fileset dir="${p2.repo.base.directory}">
        <include name="*.xml" />
      </fileset>
    </replaceregexp>

    <!-- update composite repo (this task needs to run in the Eclipse runtime) -->
    <p2.composite.repository>
      <repository compressed="false" location="${p2.repo.base.directory}"/>
      <add>
        <repository location="drops/${qualifiedVersion}"/>
      </add>
    </p2.composite.repository>

    <!-- turn the composite loading property back on.  We turned it off initally
         so we could update the metadata without downloading all the old artifacts -->
    <replaceregexp byline="true">
      <regexp pattern="property name='p2.atomic.composite.loading' value='false'" />
      <substitution expression="property name='p2.atomic.composite.loading' value='true'" />
      <fileset dir="${p2.repo.base.directory}">
        <include name="*.xml" />
      </fileset>
    </replaceregexp>

    <!-- setup the shebang and variables -->
    <echo message="#!/bin/bash${line.separator}" file="${p2.repo.base.directory}/jfrogUpload.sh" />
    <echo message="USER=xxxx${line.separator}" file="${p2.repo.base.directory}/jfrogUpload.sh" append="true" />
    <echo message="API_KEY=xxxx${line.separator}" file="${p2.repo.base.directory}/jfrogUpload.sh" append="true" />

    <!-- generate the jfrog upload script -->
    <!-- Write curl lines for every file we need to upload -->
    <apply executable="echo" relative="true" output="${p2.repo.base.directory}/jfrogUpload.sh" append="true">
      <arg value="curl -X PUT -T" />
      <srcfile />
      <arg value="-u$USER:$API_KEY"/>
      <targetfile/>

      <fileset dir="${p2.repo.base.directory}" >
        <include name="drops/**/*.*"/>
        <include name="*.xml"/>
        <include name="zipped/${project.artifactId}-${qualifiedVersion}.zip"/>
      </fileset>
      <globmapper from="*" to="&quot;https://mybatis.jfrog.io/artifactory/generator-eclipse-release/*&quot;" />
    </apply>

    <!-- make it executable -->
    <chmod perm="+x" file="${p2.repo.base.directory}/jfrogUpload.sh"/>

  </target>
</project>
